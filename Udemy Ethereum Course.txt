All of the code and diagrams from this course can be found in this repo: https://github.com/StephenGrider/EthereumCasts

Bitcoin: A Peer-to-Peer Electronic Cash System (https://bitcoin.org/bitcoin.pdf)
Ethereum: The Ultimate Smart Contract and Decentralized Application Platform (http://web.archive.org/web/20131228111141/http://vbuterin.com/ethereum.html)



https://remix.ethereum.org


In the previous section we started creating our first contract with Remix. You may have noticed some deprecation or syntax warnings. Make sure you tell Remix which compiler version it should use by doing the following:

Click the drop down menu named "Select new compiler version" and scroll down to find a version less than 0.4.19, such as 0.4.17+commit.bdeb9e52 and select it.

This will tell Remix to re-compile with that version and your errors should go away.




Some later lectures in this course will depend on an up-to-date version of Node JS.  Please take this opportunity to make sure you're running at least version 8.0.0 of Node JS.  You can check your current version by running the command node -v at your command line.

If you are running an older version, you can easily update it by grabbing an updater here: https://nodejs.org/en/download/



npm install -g solc
npm install --global --production windows-build-tools

npm config set python python2.7


npm config set msvs_version 2017 
npm install --save -g mocha ganache-cli
npm install --save -g web3@1.0.0-beta.35 





Links to syntax highlighters are below.  Remember that syntax highlighting for Solidity code isn't strictly required, and we won't be writing a lot of Solidity inside our editor.  With that in mind, if you run into any installation issues I'd recommend continuing on rather than trying to troubleshoot it.

Atom - https://atom.io/packages/language-ethereum
Open the package installation manager in atom and search for 'language-ethereum'.  After installing the package, you might have to manually change the highlighter in the .sol file.  Look for the selector at the bottom right of your editor window.
Sublime - https://packagecontrol.io/packages/Ethereum
VSCode - https://github.com/juanfranblanco/vscode-solidity
Webstorm - https://plugins.jetbrains.com/plugin/9475-intellij-solidity
VIM - https://github.com/tomlion/vim-solidity





When running your test code you are probably getting or will probably get the following:

AssertionError [ERR_ASSERTION]: Invalid callback specified



If so, you should:

1. Uninstall solc:
npm uninstall solc



2. Reinstall one of two versions:

The version used in the course:

npm install --save solc@0.4.17

or

The newest version that will not break:

npm install --save solc@0.4.25



npm install (#installs all dependencies as per package.json)





In the upcoming video lecture we will be writing our deploy.js script. Since many students are using different dependency versions, here are the result callbacks needed for each:

truffle-hdwallet-provider version 0.0.3

const result = await new web3.eth.Contract(JSON.parse(interface))
    .deploy({ data: bytecode, arguments: ['Hi there!'] })
    .send({ gas: '1000000', from: accounts[0] });


truffle-hdwallet-provider versions 0.0.4, 0.0.5 and 0.0.6

const result = await new web3.eth.Contract(JSON.parse(interface))
     .deploy({data: '0x' + bytecode, arguments: ['Hi there!']}) // add 0x bytecode
     .send({from: accounts[0]}); // remove 'gas'

